name: Generate Releases

on:
    workflow_dispatch:
        inputs:
            components:
                description: 'Components to generate releases for (comma-separated)'
                required: true
                default: 'comp1, comp2, comp3' #All conponents

jobs:
    build:
        runs-on: ubuntu-latest

        steps:
            - name: Checkout repository
              uses: actions/checkout@v2

            - name: Set up Node.js
              uses: actions/setup-node@v2
              with:
                  node-version: '16'

            - name: Install dependencies
              run: npm install -g github-release-drafter

            - name: Generate releases
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              run: |
                  # Get the list of milestones in the repository for each component.
                  IFS=',' read -ra COMPONENTS <<< "${{ github.event.inputs.components }}"

                  for COMPONENT in "${COMPONENTS[@]}"
                  do
                    MILESTONES=$(curl -s "https://api.github.com/repos/${{ github.repository }}/milestones?state=open&title=${COMPONENT}" | jq -r '.[].title')

                    for MILESTONE in $MILESTONES
                    do
                      # Initialize the release notes.
                      RELEASE_NOTES=""

                      # Get the list of changes for each category.
                      FIX_CHANGES=$(curl -s "https://api.github.com/repos/${{ github.repository }}/issues?state=closed&milestone=${MILESTONE}&labels=bug" | jq -r '.[].title')
                      NEW_CHANGES=$(curl -s "https://api.github.com/repos/${{ github.repository }}/issues?state=closed&milestone=${MILESTONE}&labels=feature" | jq -r '.[].title')
                      INTERNAL_CHANGES=$(curl -s "https://api.github.com/repos/${{ github.repository }}/issues?state=closed&milestone=${MILESTONE}&labels!=bug,labels!=feature" | jq -r '.[].title')

                      # Add the changes to the release notes.
                      if [ ! -z "$FIX_CHANGES" ]; then
                        RELEASE_NOTES+="## FIX\n"
                        RELEASE_NOTES+="$FIX_CHANGES\n\n"
                      fi

                      if [ ! -z "$NEW_CHANGES" ]; then
                        RELEASE_NOTES+="## NEW\n"
                        RELEASE_NOTES+="$NEW_CHANGES\n\n"
                      fi

                      if [ ! -z "$INTERNAL_CHANGES" ]; then
                        RELEASE_NOTES+="## INTERNAL\n"
                        RELEASE_NOTES+="$INTERNAL_CHANGES\n\n"
                      fi

                      # Use GitHub Release Drafter to generate the draft release notes for the milestone with the category-specific changes.
                      github-release-drafter --config-file .github/release-drafter.yml --release-name "Release $COMPONENT $MILESTONE" --release-notes "$RELEASE_NOTES"
                    done
